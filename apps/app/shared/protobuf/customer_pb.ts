// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/customer.proto (package customer, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message customer.UpdateCustomerRequest
 */
export class UpdateCustomerRequest extends Message<UpdateCustomerRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  /**
   * @generated from field: string phone = 4;
   */
  phone = "";

  /**
   * @generated from field: string metadata = 5;
   */
  metadata = "";

  constructor(data?: PartialMessage<UpdateCustomerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.UpdateCustomerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCustomerRequest {
    return new UpdateCustomerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCustomerRequest {
    return new UpdateCustomerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCustomerRequest {
    return new UpdateCustomerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCustomerRequest | PlainMessage<UpdateCustomerRequest> | undefined, b: UpdateCustomerRequest | PlainMessage<UpdateCustomerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCustomerRequest, a, b);
  }
}

/**
 * @generated from message customer.AdminCustomerResponse
 */
export class AdminCustomerResponse extends Message<AdminCustomerResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<AdminCustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.AdminCustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminCustomerResponse {
    return new AdminCustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminCustomerResponse {
    return new AdminCustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminCustomerResponse {
    return new AdminCustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AdminCustomerResponse | PlainMessage<AdminCustomerResponse> | undefined, b: AdminCustomerResponse | PlainMessage<AdminCustomerResponse> | undefined): boolean {
    return proto3.util.equals(AdminCustomerResponse, a, b);
  }
}

/**
 * @generated from message customer.CustomersRequest
 */
export class CustomersRequest extends Message<CustomersRequest> {
  /**
   * @generated from field: repeated string customer_ids = 1;
   */
  customerIds: string[] = [];

  constructor(data?: PartialMessage<CustomersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.CustomersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersRequest {
    return new CustomersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersRequest {
    return new CustomersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersRequest {
    return new CustomersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersRequest | PlainMessage<CustomersRequest> | undefined, b: CustomersRequest | PlainMessage<CustomersRequest> | undefined): boolean {
    return proto3.util.equals(CustomersRequest, a, b);
  }
}

/**
 * @generated from message customer.CustomerMetadataResponse
 */
export class CustomerMetadataResponse extends Message<CustomerMetadataResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  /**
   * @generated from field: bool has_account = 4;
   */
  hasAccount = false;

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  /**
   * @generated from field: string deleted_at = 7;
   */
  deletedAt = "";

  constructor(data?: PartialMessage<CustomerMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.CustomerMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "has_account", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "deleted_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerMetadataResponse {
    return new CustomerMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerMetadataResponse {
    return new CustomerMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerMetadataResponse {
    return new CustomerMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerMetadataResponse | PlainMessage<CustomerMetadataResponse> | undefined, b: CustomerMetadataResponse | PlainMessage<CustomerMetadataResponse> | undefined): boolean {
    return proto3.util.equals(CustomerMetadataResponse, a, b);
  }
}

/**
 * @generated from message customer.CustomerResponse
 */
export class CustomerResponse extends Message<CustomerResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: string billing_address_id = 5;
   */
  billingAddressId = "";

  /**
   * @generated from field: string phone = 6;
   */
  phone = "";

  /**
   * @generated from field: bool has_account = 7;
   */
  hasAccount = false;

  /**
   * @generated from field: string created_at = 8;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 9;
   */
  updatedAt = "";

  /**
   * @generated from field: string deleted_at = 10;
   */
  deletedAt = "";

  /**
   * @generated from field: string metadata = 11;
   */
  metadata = "";

  constructor(data?: PartialMessage<CustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.CustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "billing_address_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "has_account", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "deleted_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerResponse {
    return new CustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerResponse {
    return new CustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerResponse {
    return new CustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerResponse | PlainMessage<CustomerResponse> | undefined, b: CustomerResponse | PlainMessage<CustomerResponse> | undefined): boolean {
    return proto3.util.equals(CustomerResponse, a, b);
  }
}

/**
 * @generated from message customer.CustomersResponse
 */
export class CustomersResponse extends Message<CustomersResponse> {
  /**
   * @generated from field: repeated customer.CustomerResponse customers = 1;
   */
  customers: CustomerResponse[] = [];

  constructor(data?: PartialMessage<CustomersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.CustomersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customers", kind: "message", T: CustomerResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersResponse {
    return new CustomersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersResponse {
    return new CustomersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersResponse {
    return new CustomersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersResponse | PlainMessage<CustomersResponse> | undefined, b: CustomersResponse | PlainMessage<CustomersResponse> | undefined): boolean {
    return proto3.util.equals(CustomersResponse, a, b);
  }
}

/**
 * @generated from message customer.AddCustomerToGroupRequest
 */
export class AddCustomerToGroupRequest extends Message<AddCustomerToGroupRequest> {
  /**
   * @generated from field: string customer_group_id = 1;
   */
  customerGroupId = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  constructor(data?: PartialMessage<AddCustomerToGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.AddCustomerToGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCustomerToGroupRequest {
    return new AddCustomerToGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCustomerToGroupRequest {
    return new AddCustomerToGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCustomerToGroupRequest {
    return new AddCustomerToGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddCustomerToGroupRequest | PlainMessage<AddCustomerToGroupRequest> | undefined, b: AddCustomerToGroupRequest | PlainMessage<AddCustomerToGroupRequest> | undefined): boolean {
    return proto3.util.equals(AddCustomerToGroupRequest, a, b);
  }
}

/**
 * @generated from message customer.RemoveCustomerFromGroupRequest
 */
export class RemoveCustomerFromGroupRequest extends Message<RemoveCustomerFromGroupRequest> {
  /**
   * @generated from field: string customer_group_id = 1;
   */
  customerGroupId = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  constructor(data?: PartialMessage<RemoveCustomerFromGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.RemoveCustomerFromGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveCustomerFromGroupRequest {
    return new RemoveCustomerFromGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveCustomerFromGroupRequest {
    return new RemoveCustomerFromGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveCustomerFromGroupRequest {
    return new RemoveCustomerFromGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveCustomerFromGroupRequest | PlainMessage<RemoveCustomerFromGroupRequest> | undefined, b: RemoveCustomerFromGroupRequest | PlainMessage<RemoveCustomerFromGroupRequest> | undefined): boolean {
    return proto3.util.equals(RemoveCustomerFromGroupRequest, a, b);
  }
}

/**
 * @generated from message customer.CustomerGroupResponse
 */
export class CustomerGroupResponse extends Message<CustomerGroupResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<CustomerGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "customer.CustomerGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerGroupResponse {
    return new CustomerGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerGroupResponse {
    return new CustomerGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerGroupResponse {
    return new CustomerGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerGroupResponse | PlainMessage<CustomerGroupResponse> | undefined, b: CustomerGroupResponse | PlainMessage<CustomerGroupResponse> | undefined): boolean {
    return proto3.util.equals(CustomerGroupResponse, a, b);
  }
}

