// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/account.proto (package account, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message account.AccountRequest
 */
export class AccountRequest extends Message<AccountRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: string supabase_id = 3;
   */
  supabaseId = "";

  /**
   * @generated from field: string profile_url = 4;
   */
  profileUrl = "";

  /**
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string username = 6;
   */
  username = "";

  /**
   * @generated from field: string birthday = 7;
   */
  birthday = "";

  /**
   * @generated from field: string metadata = 8;
   */
  metadata = "";

  constructor(data?: PartialMessage<AccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supabase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "profile_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "birthday", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountRequest {
    return new AccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountRequest {
    return new AccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountRequest {
    return new AccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountRequest | PlainMessage<AccountRequest> | undefined, b: AccountRequest | PlainMessage<AccountRequest> | undefined): boolean {
    return proto3.util.equals(AccountRequest, a, b);
  }
}

/**
 * @generated from message account.AccountResponse
 */
export class AccountResponse extends Message<AccountResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: string supabase_id = 3;
   */
  supabaseId = "";

  /**
   * @generated from field: string profile_url = 4;
   */
  profileUrl = "";

  /**
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string update_at = 6;
   */
  updateAt = "";

  /**
   * @generated from field: string username = 7;
   */
  username = "";

  /**
   * @generated from field: string birthday = 8;
   */
  birthday = "";

  /**
   * @generated from field: string metadata = 9;
   */
  metadata = "";

  constructor(data?: PartialMessage<AccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supabase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "profile_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "update_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "birthday", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountResponse {
    return new AccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountResponse {
    return new AccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountResponse {
    return new AccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountResponse | PlainMessage<AccountResponse> | undefined, b: AccountResponse | PlainMessage<AccountResponse> | undefined): boolean {
    return proto3.util.equals(AccountResponse, a, b);
  }
}

/**
 * @generated from message account.AccountsRequest
 */
export class AccountsRequest extends Message<AccountsRequest> {
  /**
   * @generated from field: repeated string account_ids = 1;
   */
  accountIds: string[] = [];

  constructor(data?: PartialMessage<AccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountsRequest {
    return new AccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountsRequest {
    return new AccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountsRequest {
    return new AccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountsRequest | PlainMessage<AccountsRequest> | undefined, b: AccountsRequest | PlainMessage<AccountsRequest> | undefined): boolean {
    return proto3.util.equals(AccountsRequest, a, b);
  }
}

/**
 * @generated from message account.AccountsResponse
 */
export class AccountsResponse extends Message<AccountsResponse> {
  /**
   * @generated from field: repeated account.AccountResponse accounts = 1;
   */
  accounts: AccountResponse[] = [];

  constructor(data?: PartialMessage<AccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: AccountResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountsResponse {
    return new AccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountsResponse {
    return new AccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountsResponse {
    return new AccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountsResponse | PlainMessage<AccountsResponse> | undefined, b: AccountsResponse | PlainMessage<AccountsResponse> | undefined): boolean {
    return proto3.util.equals(AccountsResponse, a, b);
  }
}

/**
 * @generated from message account.AccountExistsRequest
 */
export class AccountExistsRequest extends Message<AccountExistsRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<AccountExistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountExistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountExistsRequest {
    return new AccountExistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountExistsRequest {
    return new AccountExistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountExistsRequest {
    return new AccountExistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountExistsRequest | PlainMessage<AccountExistsRequest> | undefined, b: AccountExistsRequest | PlainMessage<AccountExistsRequest> | undefined): boolean {
    return proto3.util.equals(AccountExistsRequest, a, b);
  }
}

/**
 * @generated from message account.AccountExistsResponse
 */
export class AccountExistsResponse extends Message<AccountExistsResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<AccountExistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountExistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountExistsResponse {
    return new AccountExistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountExistsResponse {
    return new AccountExistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountExistsResponse {
    return new AccountExistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountExistsResponse | PlainMessage<AccountExistsResponse> | undefined, b: AccountExistsResponse | PlainMessage<AccountExistsResponse> | undefined): boolean {
    return proto3.util.equals(AccountExistsResponse, a, b);
  }
}

/**
 * @generated from message account.AccountLikeRequest
 */
export class AccountLikeRequest extends Message<AccountLikeRequest> {
  /**
   * @generated from field: string query_username = 1;
   */
  queryUsername = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  /**
   * @generated from field: int32 limit = 4;
   */
  limit = 0;

  constructor(data?: PartialMessage<AccountLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLikeRequest {
    return new AccountLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLikeRequest {
    return new AccountLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLikeRequest {
    return new AccountLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLikeRequest | PlainMessage<AccountLikeRequest> | undefined, b: AccountLikeRequest | PlainMessage<AccountLikeRequest> | undefined): boolean {
    return proto3.util.equals(AccountLikeRequest, a, b);
  }
}

/**
 * @generated from message account.AccountPresenceRequest
 */
export class AccountPresenceRequest extends Message<AccountPresenceRequest> {
  /**
   * @generated from field: repeated string account_ids = 1;
   */
  accountIds: string[] = [];

  constructor(data?: PartialMessage<AccountPresenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountPresenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountPresenceRequest {
    return new AccountPresenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountPresenceRequest {
    return new AccountPresenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountPresenceRequest {
    return new AccountPresenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountPresenceRequest | PlainMessage<AccountPresenceRequest> | undefined, b: AccountPresenceRequest | PlainMessage<AccountPresenceRequest> | undefined): boolean {
    return proto3.util.equals(AccountPresenceRequest, a, b);
  }
}

/**
 * @generated from message account.AccountPresenceResponse
 */
export class AccountPresenceResponse extends Message<AccountPresenceResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string last_seen = 2;
   */
  lastSeen = "";

  /**
   * @generated from field: bool is_online = 3;
   */
  isOnline = false;

  constructor(data?: PartialMessage<AccountPresenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountPresenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_seen", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_online", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountPresenceResponse {
    return new AccountPresenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountPresenceResponse {
    return new AccountPresenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountPresenceResponse {
    return new AccountPresenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountPresenceResponse | PlainMessage<AccountPresenceResponse> | undefined, b: AccountPresenceResponse | PlainMessage<AccountPresenceResponse> | undefined): boolean {
    return proto3.util.equals(AccountPresenceResponse, a, b);
  }
}

/**
 * @generated from message account.AccountPresencesResponse
 */
export class AccountPresencesResponse extends Message<AccountPresencesResponse> {
  /**
   * @generated from field: repeated account.AccountPresenceResponse account_presences = 1;
   */
  accountPresences: AccountPresenceResponse[] = [];

  constructor(data?: PartialMessage<AccountPresencesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "account.AccountPresencesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_presences", kind: "message", T: AccountPresenceResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountPresencesResponse {
    return new AccountPresencesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountPresencesResponse {
    return new AccountPresencesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountPresencesResponse {
    return new AccountPresencesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountPresencesResponse | PlainMessage<AccountPresencesResponse> | undefined, b: AccountPresencesResponse | PlainMessage<AccountPresencesResponse> | undefined): boolean {
    return proto3.util.equals(AccountPresencesResponse, a, b);
  }
}

